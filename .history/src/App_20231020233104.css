body {
  margin: 0;
  padding: 0;
}
.change_btn {
  display: flex;
  margin-bottom: 10px;

}
.App {
  position: relative;
}
.change_btn button {
  margin: 10px 20px;
  cursor: pointer;
  padding: 5px 15px;
  background-color: white;
  border: 1px solid black;
  border-radius: 4px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 1px;

}
.change_btn button:hover{
  border: 2px solid rgb(2, 184, 2);
  margin: 8px 19px;
}
.editor_ {
  border-radius: 10px;
  margin-left: 20px;
}
textarea {
  position: absolute;
  top: 58px;
  right: 20px;
  width: 27%;
  height: 91%;
  resize: none;
  /* border: 1px solid black; */
  box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;

}
/* Responsive styles for mobile devices */
@media (max-width: 768px) {
  /* Adjust the styles to fit smaller screens */
  .change_btn {
    flex-direction: column; /* Stack buttons vertically on smaller screens */
    align-items: center; /* Center-align buttons */
  }

  .change_btn button {
    margin: 10px 0; /* Reduce horizontal margin for buttons */
  }

  .editor_ {
    margin-left: 0; /* Remove left margin for the editor */
  }

  textarea {
    position: relative; /* Remove absolute positioning on textarea */
    top: 0;
    right: 0;
    width: 100%; /* Expand textarea to full width */
    height: auto; /* Allow textarea to expand with content */
    margin-top: 10px; /* Add margin between buttons and textarea */
  }
}
In this updated CSS code, I've added a media query that applies styles for screens with a maximum width of 768 pixels (typical of mobile devices). Within the media query, I've made adjustments to the button layout and the positioning of the textarea to make them more suitable for smaller screens.

The flex-direction property is used to stack the buttons vertically, and the textarea's width is set to 100% to take up the full width of the viewport. You can adjust the breakpoints and styles as needed for your specific design requirements.





